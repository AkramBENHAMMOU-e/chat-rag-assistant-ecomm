[1mdiff --git a/README.md b/README.md[m
[1mdeleted file mode 100644[m
[1mindex ce7e780..0000000[m
[1m--- a/README.md[m
[1m+++ /dev/null[m
[36m@@ -1,296 +0,0 @@[m
[31m-# 🧠 RAG Assistant - Service d'Assistance Intelligente[m
[31m-[m
[31m-Service FastAPI qui implémente un système RAG (Retrieval-Augmented Generation) pour répondre aux questions sur les produits d'e-commerce en utilisant LangChain, PostgreSQL/pgvector et Google Gemini.[m
[31m-[m
[31m-## 📋 Table des Matières[m
[31m-[m
[31m-- [Présentation](#présentation)[m
[31m-- [Architecture](#architecture)[m
[31m-- [Prérequis](#prérequis)[m
[31m-- [Installation](#installation)[m
[31m-- [Configuration](#configuration)[m
[31m-- [Démarrage](#démarrage)[m
[31m-- [Utilisation](#utilisation)[m
[31m-- [API Documentation](#api-documentation)[m
[31m-- [Tests](#tests)[m
[31m-- [Dépannage](#dépannage)[m
[31m-[m
[31m-## 🎯 Présentation[m
[31m-[m
[31m-Le RAG Assistant est un service qui permet de répondre intelligemment aux questions des utilisateurs concernant les produits, en combinant :[m
[31m-- **Recherche vectorielle** dans PostgreSQL/pgvector[m
[31m-- **Intelligence artificielle** via Google Gemini[m
[31m-- **Analyse de contexte** des produits et avis clients[m
[31m-[m
[31m-### Fonctionnalités[m
[31m-[m
[31m-- ✅ Réponses basées sur les données réelles des produits[m
[31m-- ✅ Analyse des avis clients pour contexte enrichi[m
[31m-- ✅ Recherche vectorielle optimisée avec pgvector[m
[31m-- ✅ Support du filtrage par métadonnées (prix, catégorie, etc.)[m
[31m-- ✅ API RESTful avec FastAPI[m
[31m-- ✅ Documentation interactive Swagger/OpenAPI[m
[31m-[m
[31m-## 🏗️ Architecture[m
[31m-[m
[31m-```[m
[31m-┌─────────────────┐[m
[31m-│   Client/User   │[m
[31m-└────────┬────────┘[m
[31m-         │[m
[31m-         ▼[m
[31m-┌─────────────────┐      ┌─────────────────┐[m
[31m-│  Spring Boot    │─────▶│  FastAPI RAG    │[m
[31m-│   (Backend)     │      │   (Service)     │[m
[31m-└─────────────────┘      └────────┬────────┘[m
[31m-                                  │[m
[31m-                    ┌─────────────┼─────────────┐[m
[31m-                    ▼             ▼             ▼[m
[31m-         ┌──────────────┐  ┌──────────┐  ┌──────────┐[m
[31m-         │ PostgreSQL   │  │ Hugging  │  │ Google   │[m
[31m-         │ + pgvector   │  │   Face   │  │  Gemini  │[m
[31m-         └──────────────┘  └──────────┘  └──────────┘[m
[31m-```[m
[31m-[m
[31m-## 📦 Prérequis[m
[31m-[m
[31m-- **Python** 3.9 ou supérieur[m
[31m-- **PostgreSQL** 12+ avec l'extension pgvector[m
[31m-- **Google Gemini API Key** (gratuite sur https://makersuite.google.com/app/apikey)[m
[31m-- **Backend Spring Boot** démarré sur port 8080[m
[31m-[m
[31m-## 🔧 Installation[m
[31m-[m
[31m-### 1. Cloner le dépôt[m
[31m-[m
[31m-```bash[m
[31m-cd rag-assistant[m
[31m-```[m
[31m-[m
[31m-### 2. Créer l'environnement virtuel[m
[31m-[m
[31m-```bash[m
[31m-python -m venv rag_env[m
[31m-rag_env\Scripts\activate[m
[31m-[m
[31m-```[m
[31m-[m
[31m-### 3. Installer les dépendances[m
[31m-[m
[31m-```bash[m
[31m-pip install -r requirements.txt[m
[31m-```[m
[31m-[m
[31m-### 4. Configuration[m
[31m-[m
[31m-Copiez le fichier `.env.example` vers `.env` :[m
[31m-[m
[31m-```bash[m
[31m-# Windows[m
[31m-copy .env.example .env[m
[31m-```[m
[31m-[m
[31m-Puis éditez `.env` avec vos paramètres :[m
[31m-[m
[31m-```env[m
[31m-# Backend Spring Boot URL[m
[31m-BACKEND_URL=http://localhost:8080[m
[31m-[m
[31m-# Google Gemini API Key (REQUIRED)[m
[31m-GOOGLE_API_KEY=your_api_key_here[m
[31m-[m
[31m-# Configuration PostgreSQL[m
[31m-POSTGRES_HOST=localhost[m
[31m-POSTGRES_PORT=5432[m
[31m-POSTGRES_DB=ecommerceInt[m
[31m-POSTGRES_USER=admin[m
[31m-POSTGRES_PASSWORD=admin123[m
[31m-[m
[31m-# Port FastAPI[m
[31m-PORT=8081[m
[31m-```[m
[31m-[m
[31m-### 5. Configurer PostgreSQL[m
[31m-[m
[31m-Connectez-vous à PostgreSQL et créez l'extension pgvector :[m
[31m-[m
[31m-```sql[m
[31m-CREATE EXTENSION IF NOT EXISTS vector;[m
[31m-```[m
[31m-[m
[31m-## 🚀 Démarrage[m
[31m-[m
[31m-### Développement[m
[31m-[m
[31m-```bash[m
[31m-uvicorn app:app --host 0.0.0.0 --port 8081 --reload[m
[31m-```[m
[31m-[m
[31m-### Production[m
[31m-[m
[31m-```bash[m
[31m-uvicorn app:app --host 0.0.0.0 --port 8081[m
[31m-```[m
[31m-[m
[31m-Le service sera accessible sur : http://localhost:8081[m
[31m-[m
[31m-## 📖 Utilisation[m
[31m-[m
[31m-### Test de santé[m
[31m-[m
[31m-```bash[m
[31m-curl http://localhost:8081/health[m
[31m-```[m
[31m-[m
[31m-Réponse attendue :[m
[31m-```json[m
[31m-{[m
[31m-  "status": "healthy"[m
[31m-}[m
[31m-```[m
[31m-[m
[31m-### Test d'initialisation[m
[31m-[m
[31m-```bash[m
[31m-curl http://localhost:8081/[m
[31m-```[m
[31m-[m
[31m-Réponse attendue :[m
[31m-```json[m
[31m-{[m
[31m-  "status": "ok",[m
[31m-  "message": "RAG Assistant API is running",[m
[31m-  "rag_initialized": true[m
[31m-}[m
[31m-```[m
[31m-[m
[31m-### Poser une question[m
[31m-[m
[31m-```bash[m
[31m-curl -X POST http://localhost:8081/rag-query \[m
[31m-  -H "Content-Type: application/json" \[m
[31m-  -d '{"question": "Quels sont les meilleurs cafés en grains ?"}'[m
[31m-```[m
[31m-[m
[31m-Réponse :[m
[31m-```json[m
[31m-{[m
[31m-  "answer": "Basé sur notre catalogue, nous recommandons..."[m
[31m-}[m
[31m-```[m
[31m-[m
[31m-## 📚 API Documentation[m
[31m-[m
[31m-Une fois le service démarré, accédez à :[m
[31m-- **Swagger UI** : http://localhost:8081/docs[m
[31m-- **ReDoc** : http://localhost:8081/redoc[m
[31m-- **OpenAPI JSON** : http://localhost:8081/openapi.json[m
[31m-[m
[31m-## 🧪 Tests[m
[31m-[m
[31m-Exécutez les tests depuis la racine du projet :[m
[31m-[m
[31m-```bash[m
[31m-# Test Python simple[m
[31m-python test_rag.py[m
[31m-[m
[31m-# Test PowerShell[m
[31m-powershell -ExecutionPolicy Bypass -File test_rag.ps1[m
[31m-```[m
[31m-[m
[31m-## 🔍 Dépannage[m
[31m-[m
[31m-### Erreur : GOOGLE_API_KEY not defined[m
[31m-[m
[31m-**Solution :** Vérifiez que votre fichier `.env` contient une clé API valide.[m
[31m-[m
[31m-### Erreur : PostgreSQL connection failed[m
[31m-[m
[31m-**Solution :** [m
[31m-1. Vérifiez que PostgreSQL est démarré[m
[31m-2. Vérifiez les identifiants dans `.env`[m
[31m-3. Vérifiez que l'extension pgvector est installée[m
[31m-[m
[31m-### Erreur : Cannot connect to backend[m
[31m-[m
[31m-**Solution :** [m
[31m-1. Vérifiez que Spring Boot est démarré sur http://localhost:8080[m
[31m-2. Vérifiez la valeur de `BACKEND_URL` dans `.env`[m
[31m-[m
[31m-### Slow performance[m
[31m-[m
[31m-**Solution :**[m
[31m-1. Augmentez les ressources PostgreSQL[m
[31m-2. Optimisez les index de la base vectorielle[m
[31m-3. Utilisez un modèle d'embedding plus léger[m
[31m-[m
[31m-## 🛠️ Développement[m
[31m-[m
[31m-### Structure du Projet[m
[31m-[m
[31m-```[m
[31m-rag-assistant/[m
[31m-├── app.py                 # Application FastAPI principale[m
[31m-├── main.py               # Script d'initialisation (optionnel)[m
[31m-├── requirements.txt      # Dépendances Python[m
[31m-├── .env                  # Variables d'environnement (NE PAS COMMITTER)[m
[31m-├── .env.example          # Template de configuration[m
[31m-